syntax = "proto3";

package indradb;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

message Uuid {
    bytes value = 1;
}

message Type {
    string value = 1;
}

message Json {
    string value = 1;
}

message Edge {
    EdgeKey key = 1;
    google.protobuf.Timestamp created_datetime = 2;
}

message EdgeKey {
    Uuid outbound_id = 1;
    Type t = 2;
    Uuid inbound_id = 3;
}

message Vertex {
    Uuid id = 1;
    Type t = 2;
}

message VertexQuery {
    oneof query {
        RangeVertexQuery range = 1;
        SpecificVertexQuery specific = 2;
        PipeVertexQuery pipe = 3;
    }
}

message RangeVertexQuery {
    uint32 limit = 1;
    Type t = 2;
    Uuid start_id = 3;
}

message SpecificVertexQuery {
    repeated Uuid ids = 1;
}

message PipeVertexQuery {
    EdgeQuery inner = 1;
    EdgeDirection direction = 2;
    uint32 limit = 3;
    Type t = 4;
}

message VertexPropertyQuery {
    VertexQuery inner = 1;
    string name = 2;
}

message EdgeQuery {
    oneof query {
        SpecificEdgeQuery specific = 1;
        PipeEdgeQuery pipe = 2;
    }
}

message SpecificEdgeQuery {
    repeated EdgeKey keys = 1;
}

message PipeEdgeQuery {
    VertexQuery inner = 1;
    EdgeDirection direction = 2;
    Type t = 3;
    google.protobuf.Timestamp high = 4;
    google.protobuf.Timestamp low = 5;
    uint32 limit = 6;
}

message EdgePropertyQuery {
    EdgeQuery inner = 1;
    string name = 2;
}

enum EdgeDirection {
    OUTBOUND = 0;
    INBOUND = 1;
}

message NamedProperty {
    string name = 1;
    Json value = 2;
}

message VertexProperty {
    Uuid id = 1;
    Json value = 2;
}

message VertexProperties {
    Vertex vertex = 1;
    repeated NamedProperty props = 2;
}

message EdgeProperty {
    EdgeKey key = 1;
    Json value = 2;
}

message EdgeProperties {
    Edge edge = 1;
    repeated NamedProperty props = 2;
}

message BulkInsertItem {
    oneof item {
        Vertex vertex = 1;
        EdgeKey edge = 2;
        VertexPropertyBulkInsertItem vertex_property = 3;
        EdgePropertyBulkInsertItem edge_property = 4;
    }
}

message VertexPropertyBulkInsertItem {
    Uuid id = 1;
    string name = 2;
    Json value = 3;
}

message EdgePropertyBulkInsertItem {
    EdgeKey key = 1;
    string name = 2;
    Json value = 3;
}

message GetEdgeCountRequest {
    Uuid id = 1;
    Type t = 2;
    EdgeDirection direction = 3;
}

message SetVertexPropertiesRequest {
    VertexPropertyQuery q = 1;
    Json value = 2;
}

message SetEdgePropertiesRequest {
    EdgePropertyQuery q = 1;
    Json value = 2;
}

message TransactionRequest {
    uint32 request_id = 1;

    oneof request {
        // Creates a new vertex. Returns whether the vertex was successfully
        // created - if this is false, it's because a vertex with the same UUID
        // already exists.
        Vertex create_vertex = 2;

        // Creates a new vertex with just a type specification. As opposed to
        // `CreateVertex`, this is used when you do not want to manually specify
        // the vertex's UUID. Returns the new vertex's UUID.
        Type create_vertex_from_type = 3;

        // Gets a range of vertices specified by a query.
        VertexQuery get_vertices = 4;

        // Deletes existing vertices specified by a query.
        VertexQuery delete_vertices = 5;

        // Gets the number of vertices in the datastore.
        google.protobuf.Empty get_vertex_count = 6;

        // Creates a new edge. If the edge already exists, this will update it
        // with a new update datetime. Returns whether the edge was successfully
        // created - if this is false, it's because one of the specified vertices
        // is missing.
        EdgeKey create_edge = 7;

        // Gets a range of edges specified by a query.
        EdgeQuery get_edges = 8;

        // Deletes a set of edges specified by a query.
        EdgeQuery delete_edges = 9;

        // Gets the number of edges associated with a vertex.
        GetEdgeCountRequest get_edge_count = 10;

        // Gets vertex properties.
        VertexPropertyQuery get_vertex_properties = 11;

        // Sets vertex properties.
        SetVertexPropertiesRequest set_vertex_properties = 12;

        // Deletes vertex properties.
        VertexPropertyQuery delete_vertex_properties = 13;

        // Gets edge properties.
        EdgePropertyQuery get_edge_properties = 14;

        // Sets edge properties.
        SetEdgePropertiesRequest set_edge_properties = 15;

        // Deletes edge properties.
        EdgePropertyQuery delete_edge_properties = 16;

        // Gets vertexes and all properties for each vertex.
        VertexQuery get_all_vertex_properties = 17;

        // Gets edges and all properties for each edge.
        EdgeQuery get_all_edge_properties = 18;
    }
}

message TransactionResponse {
    uint32 request_id = 1;

    oneof response {
        google.protobuf.Empty empty = 2;
        bool ok = 3;
        uint64 count = 4;
        Uuid id = 5;
        Vertex vertex = 6;
        Edge edge = 7;
        VertexProperty vertex_property = 8;
        VertexProperties vertex_properties = 9;
        EdgeProperty edge_property = 10;
        EdgeProperties edge_properties = 11;
    }
}

service IndraDB {
    rpc Ping(google.protobuf.Empty) returns (google.protobuf.Empty);
    rpc BulkInsert(stream BulkInsertItem) returns (google.protobuf.Empty);
    rpc Transaction(stream TransactionRequest) returns (stream TransactionResponse);
}
