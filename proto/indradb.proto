syntax = "proto3";

package indradb;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

// A UUID.
message Uuid {
    bytes value = 1;
}

/// A string that must be less than 256 characters long, and can only contain
/// letters, numbers, dashes and underscores. This is used for vertex and edge
/// types, as well as property names.
message Identifier {
    string value = 1;
}

// A JSON value.
message Json {
    string value = 1;
}

// An edge.
//
// Edges are how you would represent a verb or a relationship in the
// datastore. An example might be "liked" or "reviewed". Edges are typed and
// directed.
message Edge {
    // The key to the edge.
    EdgeKey key = 1;
    // When the edge was created.
    google.protobuf.Timestamp created_datetime = 2;
}

// Represents a uniquely identifiable key to an edge.
message EdgeKey {
    // The id of the outbound vertex.
    Uuid outbound_id = 1;
    // The type of the edge.
    Identifier t = 2;
    // The id of the inbound vertex.
    Uuid inbound_id = 3;
}

// A vertex.
//
// Vertices are how you would represent nouns in the datastore. An example
// might be a user, or a movie. All vertices have a unique ID and a type.
message Vertex {
    // The id of the vertex.
    Uuid id = 1;
    // The type of the vertex.
    Identifier t = 2;
}

// A query for vertices.
message VertexQuery {
    oneof query {
        RangeVertexQuery range = 1;
        SpecificVertexQuery specific = 2;
        PipeVertexQuery pipe = 3;
        PropertyPresenceVertexQuery property_presence = 4;
        PropertyValueVertexQuery property_value = 5;
        PipePropertyPresenceVertexQuery pipe_property_presence = 6;
        PipePropertyValueVertexQuery pipe_property_value = 7;
    }
}

// Gets a range of vertices.
message RangeVertexQuery {
    // Limits the number of vertices to get.
    uint32 limit = 1;
    // Filters the type of vertices returned.
    Identifier t = 2;
    // Sets the lowest vertex ID to return.
    Uuid start_id = 3;
}

// Gets a specific set of vertices.
message SpecificVertexQuery {
    // The IDs of the vertices to get.
    repeated Uuid ids = 1;
}

// Gets the vertices associated with edges.
message PipeVertexQuery {
    // The edge query to build off of.
    EdgeQuery inner = 1;
    // Whether to get outbound or inbound vertices on the edges.
    EdgeDirection direction = 2;
    // Limits the number of vertices to get.
    uint32 limit = 3;
    // Filters the type of vertices returned.
    Identifier t = 4;
}

// Gets property values associated with vertices.
message VertexPropertyQuery {
    reserved 2;
    // The vertex query to build off of.
    VertexQuery inner = 1;
    // The name of the property to get.
    Identifier name = 3;
}

// Gets vertices with a property.
message PropertyPresenceVertexQuery {
    // The name of the property.
    Identifier name = 1;
}

// Gets vertices with a property equal to a given value.
message PropertyValueVertexQuery {
    // The name of the property.
    Identifier name = 1;
    // The value of the property.
    Json value = 2;
}

// Gets vertices with a property.
message PipePropertyPresenceVertexQuery {
    // The query to filter.
    VertexQuery inner = 1;
    // The name of the property.
    Identifier name = 2;
    // Whether we should look for property presence or lack thereof.
    bool exists = 3;
}

// Gets vertices with a property equal to a given value.
message PipePropertyValueVertexQuery {
    // The query to filter.
    VertexQuery inner = 1;
    // The name of the property.
    Identifier name = 2;
    // The value of the property.
    Json value = 3;
    // Whether we should look for property equality or non-equality.
    bool equal = 4;
}

// A query for edges.
message EdgeQuery {
    oneof query {
        SpecificEdgeQuery specific = 1;
        PipeEdgeQuery pipe = 2;
        PropertyPresenceEdgeQuery property_presence = 3;
        PropertyValueEdgeQuery property_value = 4;
        PipePropertyPresenceEdgeQuery pipe_property_presence = 5;
        PipePropertyValueEdgeQuery pipe_property_value = 6;
    }
}

// Gets a specific set of edges.
message SpecificEdgeQuery {
    // The keys of the edges to get.
    repeated EdgeKey keys = 1;
}

// Gets edges with a property.
message PropertyPresenceEdgeQuery {
    // The name of the property.
    Identifier name = 1;
}

// Gets edges with a property equal to a given value.
message PropertyValueEdgeQuery {
    // The name of the property.
    Identifier name = 1;
    // The value of the property.
    Json value = 2;
}

// Gets edges with a property.
message PipePropertyPresenceEdgeQuery {
    // The query to filter.
    EdgeQuery inner = 1;
    // The name of the property.
    Identifier name = 2;
    // Whether we should look for property presence or lack thereof.
    bool exists = 3;
}

// Gets edges with a property equal to a given value.
message PipePropertyValueEdgeQuery {
    // The query to filter.
    EdgeQuery inner = 1;
    // The name of the property.
    Identifier name = 2;
    // The value of the property.
    Json value = 3;
    // Whether we should look for property equality or non-equality.
    bool equal = 4;
}

// Gets the edges associated with vertices.
message PipeEdgeQuery {
    // The vertex query to build off of.
    VertexQuery inner = 1;
    // Whether to get outbound or inbound edges on the vertices.
    EdgeDirection direction = 2;
    // Filters the type of edges returned.
    Identifier t = 3;
    // Specifies the newest update datetime for returned edges.
    google.protobuf.Timestamp high = 4;
    // Specifies the oldest update datetime for returned edges.
    google.protobuf.Timestamp low = 5;
    // Limits the number of edges to get.
    uint32 limit = 6;
}

// Gets property values associated with edges.
message EdgePropertyQuery {
    reserved 2;
    // The edge query to build off of.
    EdgeQuery inner = 1;
    // The name of the property to get.
    Identifier name = 3;
}

// Specifies what kind of items should be piped from one type of query to
// another.
//
// Edge and vertex queries can build off of one another via pipes - e.g. you
// can get the outbound edges of a set of vertices by piping from a vertex
// query to an edge query. `EdgeDirection`s are used to specify which
// end of things you want to pipe - either the outbound items or the inbound
// items.
enum EdgeDirection {
    OUTBOUND = 0;
    INBOUND = 1;
}

// A property.
message NamedProperty {
    reserved 1;
    // The id of the vertex.
    Identifier name = 3;
    // The property value.
    Json value = 2;
}

// Represents a vertex property.
message VertexProperty {
    // The id of the vertex.
    Uuid id = 1;
    // The property value.
    Json value = 2;
}

// A vertex with properties.
message VertexProperties {
    // The vertex.
    Vertex vertex = 1;
    // All of the vertex's properties.
    repeated NamedProperty props = 2;
}

// Represents an edge property.
message EdgeProperty {
    // The key to the edge.
    EdgeKey key = 1;
    // The property value.
    Json value = 2;
}

// An edge with properties.
message EdgeProperties {
    // The edge.
    Edge edge = 1;
    // All of the edge's properties.
    repeated NamedProperty props = 2;
}

// An item to insert, as part of a bulk insert request.
message BulkInsertItem {
    oneof item {
        Vertex vertex = 1;
        EdgeKey edge = 2;
        VertexPropertyBulkInsertItem vertex_property = 3;
        EdgePropertyBulkInsertItem edge_property = 4;
    }
}

// A vertex property to insert.
message VertexPropertyBulkInsertItem {
    reserved 2;
    Uuid id = 1;
    Identifier name = 4;
    Json value = 3;
}

// An edge property to insert.
message EdgePropertyBulkInsertItem {
    reserved 2;
    EdgeKey key = 1;
    Identifier name = 4;
    Json value = 3;
}

// A request to index a property.
message IndexPropertyRequest {
    Identifier name = 1;
}

message GetEdgeCountRequest {
    Uuid id = 1;
    Identifier t = 2;
    EdgeDirection direction = 3;
}

message SetVertexPropertiesRequest {
    VertexPropertyQuery q = 1;
    Json value = 2;
}

message SetEdgePropertiesRequest {
    EdgePropertyQuery q = 1;
    Json value = 2;
}

message CreateResponse {
    bool created = 1;
}

message CountResponse {
    uint64 count = 1;
}

// A request to execute a plugin.
message ExecutePluginRequest {
    string name = 1;
    Json arg = 2;
}

// A response to a plugin execution.
message ExecutePluginResponse {
    Json value = 1;
}

service IndraDB {
    // Pings the server.
    rpc Ping(google.protobuf.Empty) returns (google.protobuf.Empty);
    
    // Syncs persisted content. Depending on the datastore implementation,
    // this has different meanings - including potentially being a no-op.
    rpc Sync(google.protobuf.Empty) returns (google.protobuf.Empty);

    // Creates a new vertex. Returns whether the vertex was successfully
    // created - if this is false, it's because a vertex with the same UUID
    // already exists.
    rpc CreateVertex(Vertex) returns (CreateResponse);

    // Creates a new vertex with just a type specification. As opposed to
    // `CreateVertex`, this is used when you do not want to manually specify
    // the vertex's UUID. Returns the new vertex's UUID.
    rpc CreateVertexFromType(Identifier) returns (Uuid);

    // Gets a range of vertices specified by a query.
    rpc GetVertices(VertexQuery) returns (stream Vertex);

    // Deletes existing vertices specified by a query.
    rpc DeleteVertices(VertexQuery) returns (google.protobuf.Empty);

    // Gets the number of vertices in the datastore.
    rpc GetVertexCount(google.protobuf.Empty) returns (CountResponse);

    // Creates a new edge. If the edge already exists, this will update it
    // with a new update datetime. Returns whether the edge was successfully
    // created - if this is false, it's because one of the specified vertices
    // is missing.
    rpc CreateEdge(EdgeKey) returns (CreateResponse);

    // Gets a range of edges specified by a query.
    rpc GetEdges(EdgeQuery) returns (stream Edge);

    // Deletes a set of edges specified by a query.
    rpc DeleteEdges(EdgeQuery) returns (google.protobuf.Empty);

    // Gets the number of edges associated with a vertex.
    rpc GetEdgeCount(GetEdgeCountRequest) returns (CountResponse);

    // Gets vertex properties.
    rpc GetVertexProperties(VertexPropertyQuery) returns (stream VertexProperty);

    // Gets vertexes and all properties for each vertex.
    rpc GetAllVertexProperties(VertexQuery) returns (stream VertexProperties);

    // Sets vertex properties.
    rpc SetVertexProperties(SetVertexPropertiesRequest) returns (google.protobuf.Empty);

    // Deletes vertex properties.
    rpc DeleteVertexProperties(VertexPropertyQuery) returns (google.protobuf.Empty);

    // Gets edge properties.
    rpc GetEdgeProperties(EdgePropertyQuery) returns (stream EdgeProperty);

    // Sets edge properties.
    rpc SetEdgeProperties(SetEdgePropertiesRequest) returns (google.protobuf.Empty);

    // Deletes edge properties.
    rpc DeleteEdgeProperties(EdgePropertyQuery) returns (google.protobuf.Empty);

    // Gets edges and all properties for each edge.
    rpc GetAllEdgeProperties(EdgeQuery) returns (stream EdgeProperties);

    // Bulk inserts many vertices, edges, and/or properties.
    //
    // Note that datastores have discretion on how to approach safeguard vs
    // performance tradeoffs. In particular:
    // * If the datastore is disk-backed, it may or may not flush before
    //   returning.
    // * The datastore might not verify for correctness; e.g., it might not
    //   ensure that the relevant vertices exist before inserting an edge.
    rpc BulkInsert(stream BulkInsertItem) returns (google.protobuf.Empty);

    // Enables indexing on a specified property. When indexing is enabled on a
    // property, it's possible to query on its presence and values.
    rpc IndexProperty(IndexPropertyRequest) returns (google.protobuf.Empty);

    // Executes a plugin and returns back the response from the plugin.
    rpc ExecutePlugin(ExecutePluginRequest) returns (ExecutePluginResponse);
}
